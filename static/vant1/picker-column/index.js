'use strict';

var _component = require('./../common/component.js');

var _utils = require('./../common/utils.js');

var DEFAULT_DURATION = 200;
(0, _component.VantComponent)({
    classes: ['active-class'],
    props: {
        valueKey: String,
        className: String,
        itemHeight: Number,
        visibleItemCount: Number,
        initialOptions: {
            type: Array,
            value: []
        },
        defaultIndex: {
            type: Number,
            value: 0
        }
    },
    data: {
        startY: 0,
        offset: 0,
        duration: 0,
        startOffset: 0,
        options: [],
        currentIndex: 0
    },
    created: function created() {
        var _this = this;

        var _data = this.data,
            defaultIndex = _data.defaultIndex,
            initialOptions = _data.initialOptions;

        this.set({
            currentIndex: defaultIndex,
            options: initialOptions
        }).then(function () {
            _this.setIndex(defaultIndex);
        });
    },

    computed: {
        count: function count() {
            return this.data.options.length;
        },
        baseOffset: function baseOffset() {
            var data = this.data;

            return data.itemHeight * (data.visibleItemCount - 1) / 2;
        },
        wrapperStyle: function wrapperStyle() {
            var data = this.data;

            return ['transition: ' + data.duration + 'ms', 'transform: translate3d(0, ' + (data.offset + data.baseOffset) + 'px, 0)', 'line-height: ' + data.itemHeight + 'px'].join('; ');
        }
    },
    watch: {
        defaultIndex: function defaultIndex(value) {
            this.setIndex(value);
        }
    },
    methods: {
        onTouchStart: function onTouchStart(event) {
            this.set({
                startY: event.touches[0].clientY,
                startOffset: this.data.offset,
                duration: 0
            });
        },
        onTouchMove: function onTouchMove(event) {
            var data = this.data;

            var deltaY = event.touches[0].clientY - data.startY;
            this.set({
                offset: (0, _utils.range)(data.startOffset + deltaY, -(data.count * data.itemHeight), data.itemHeight)
            });
        },
        onTouchEnd: function onTouchEnd() {
            var data = this.data;

            if (data.offset !== data.startOffset) {
                this.set({
                    duration: DEFAULT_DURATION
                });
                var index = (0, _utils.range)(Math.round(-data.offset / data.itemHeight), 0, data.count - 1);
                this.setIndex(index, true);
            }
        },
        onClickItem: function onClickItem(event) {
            var index = event.currentTarget.dataset.index;

            this.setIndex(index, true);
        },
        adjustIndex: function adjustIndex(index) {
            var data = this.data;

            index = (0, _utils.range)(index, 0, data.count);
            for (var i = index; i < data.count; i++) {
                if (!this.isDisabled(data.options[i])) return i;
            }
            for (var _i = index - 1; _i >= 0; _i--) {
                if (!this.isDisabled(data.options[_i])) return _i;
            }
        },
        isDisabled: function isDisabled(option) {
            return (0, _utils.isObj)(option) && option.disabled;
        },
        getOptionText: function getOptionText(option) {
            var data = this.data;

            return (0, _utils.isObj)(option) && data.valueKey in option ? option[data.valueKey] : option;
        },
        setIndex: function setIndex(index, userAction) {
            var _this2 = this;

            var data = this.data;

            index = this.adjustIndex(index) || 0;
            var offset = -index * data.itemHeight;
            if (index !== data.currentIndex) {
                return this.set({ offset: offset, currentIndex: index }).then(function () {
                    userAction && _this2.$emit('change', index);
                });
            }
            return this.set({ offset: offset });
        },
        setValue: function setValue(value) {
            var options = this.data.options;

            for (var i = 0; i < options.length; i++) {
                if (this.getOptionText(options[i]) === value) {
                    return this.setIndex(i);
                }
            }
            return Promise.resolve();
        },
        getValue: function getValue() {
            var data = this.data;

            return data.options[data.currentIndex];
        }
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIkRFRkFVTFRfRFVSQVRJT04iLCJjbGFzc2VzIiwicHJvcHMiLCJ2YWx1ZUtleSIsIlN0cmluZyIsImNsYXNzTmFtZSIsIml0ZW1IZWlnaHQiLCJOdW1iZXIiLCJ2aXNpYmxlSXRlbUNvdW50IiwiaW5pdGlhbE9wdGlvbnMiLCJ0eXBlIiwiQXJyYXkiLCJ2YWx1ZSIsImRlZmF1bHRJbmRleCIsImRhdGEiLCJzdGFydFkiLCJvZmZzZXQiLCJkdXJhdGlvbiIsInN0YXJ0T2Zmc2V0Iiwib3B0aW9ucyIsImN1cnJlbnRJbmRleCIsImNyZWF0ZWQiLCJzZXQiLCJ0aGVuIiwic2V0SW5kZXgiLCJjb21wdXRlZCIsImNvdW50IiwibGVuZ3RoIiwiYmFzZU9mZnNldCIsIndyYXBwZXJTdHlsZSIsImpvaW4iLCJ3YXRjaCIsIm1ldGhvZHMiLCJvblRvdWNoU3RhcnQiLCJldmVudCIsInRvdWNoZXMiLCJjbGllbnRZIiwib25Ub3VjaE1vdmUiLCJkZWx0YVkiLCJvblRvdWNoRW5kIiwiaW5kZXgiLCJNYXRoIiwicm91bmQiLCJvbkNsaWNrSXRlbSIsImN1cnJlbnRUYXJnZXQiLCJkYXRhc2V0IiwiYWRqdXN0SW5kZXgiLCJpIiwiaXNEaXNhYmxlZCIsIm9wdGlvbiIsImRpc2FibGVkIiwiZ2V0T3B0aW9uVGV4dCIsInVzZXJBY3Rpb24iLCIkZW1pdCIsInNldFZhbHVlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJnZXRWYWx1ZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFDQSxJQUFNQSxtQkFBbUIsR0FBekI7QUFDQSw4QkFBYztBQUNWQyxhQUFTLENBQUMsY0FBRCxDQURDO0FBRVZDLFdBQU87QUFDSEMsa0JBQVVDLE1BRFA7QUFFSEMsbUJBQVdELE1BRlI7QUFHSEUsb0JBQVlDLE1BSFQ7QUFJSEMsMEJBQWtCRCxNQUpmO0FBS0hFLHdCQUFnQjtBQUNaQyxrQkFBTUMsS0FETTtBQUVaQyxtQkFBTztBQUZLLFNBTGI7QUFT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Q1AsSUFETyxDQUNoQkEsSUFEZ0I7O0FBRXhCMEIsb0JBQVEsS0FBS00sV0FBTCxDQUFpQk4sS0FBakIsS0FBMkIsQ0FBbkM7QUFDQSxnQkFBTXhCLFNBQVMsQ0FBQ3dCLEtBQUQsR0FBUzFCLEtBQUtSLFVBQTdCO0FBQ0EsZ0JBQUlrQyxVQUFVMUIsS0FBS00sWUFBbkIsRUFBaUM7QUFDN0IsdUJBQU8sS0FBS0UsR0FBTCxDQUFTLEVBQUVOLGNBQUYsRUFBVUksY0FBY29CLEtBQXhCLEVBQVQsRUFBMENqQixJQUExQyxDQUErQyxZQUFNO0FBQ3hENkIsa0NBQWMsT0FBS0MsS0FBTCxDQUFXLFFBQVgsRUFBcUJiLEtBQXJCLENBQWQ7QUFDSCxpQkFGTSxDQUFQO0FBR0g7QUFDRCxtQkFBTyxLQUFLbEIsR0FBTCxDQUFTLEVBQUVOLGNBQUYsRUFBVCxDQUFQO0FBQ0gsU0E1REk7QUE2RExzQyxnQkE3REssb0JBNkRJMUMsS0E3REosRUE2RFc7QUFBQSxnQkFDSk8sT0FESSxHQUNRLEtBQUtMLElBRGIsQ0FDSkssT0FESTs7QUFFWixpQkFBSyxJQUFJNEIsSUFBSSxDQUFiLEVBQWdCQSxJQUFJNUIsUUFBUVEsTUFBNUIsRUFBb0NvQixHQUFwQyxFQUF5QztBQUNyQyxvQkFBSSxLQUFLSSxhQUFMLENBQW1CaEMsUUFBUTRCLENBQVIsQ0FBbkIsTUFBbUNuQyxLQUF2QyxFQUE4QztBQUMxQywyQkFBTyxLQUFLWSxRQUFMLENBQWN1QixDQUFkLENBQVA7QUFDSDtBQUNKO0FBQ0QsbUJBQU9RLFFBQVFDLE9BQVIsRUFBUDtBQUNILFNBckVJO0FBc0VMQyxnQkF0RUssc0JBc0VNO0FBQUEsZ0JBQ0MzQyxJQURELEdBQ1UsSUFEVixDQUNDQSxJQUREOztBQUVQLG1CQUFPQSxLQUFLSyxPQUFMLENBQWFMLEtBQUtNLFlBQWxCLENBQVA7QUFDSDtBQXpFSTtBQXZEQyxDQUFkIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmFudENvbXBvbmVudCB9IGZyb20gJy4uL2NvbW1vbi9jb21wb25lbnQnO1xuaW1wb3J0IHsgaXNPYmosIHJhbmdlIH0gZnJvbSAnLi4vY29tbW9uL3V0aWxzJztcbmNvbnN0IERFRkFVTFRfRFVSQVRJT04gPSAyMDA7XG5WYW50Q29tcG9uZW50KHtcbiAgICBjbGFzc2VzOiBbJ2FjdGl2ZS1jbGFzcyddLFxuICAgIHByb3BzOiB7XG4gICAgICAgIHZhbHVlS2V5OiBTdHJpbmcsXG4gICAgICAgIGNsYXNzTmFtZTogU3RyaW5nLFxuICAgICAgICBpdGVtSGVpZ2h0OiBOdW1iZXIsXG4gICAgICAgIHZpc2libGVJdGVtQ291bnQ6IE51bWJlcixcbiAgICAgICAgaW5pdGlhbE9wdGlvbnM6IHtcbiAgICAgICAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgICAgICAgdmFsdWU6IFtdXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHRJbmRleDoge1xuICAgICAgICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGF0YToge1xuICAgICAgICBzdGFydFk6IDAsXG4gICAgICAgIG9mZnNldDogMCxcbiAgICAgICAgZHVyYXRpb246IDAsXG4gICAgICAgIHN0YXJ0T2Zmc2V0OiAwLFxuICAgICAgICBvcHRpb25zOiBbXSxcbiAgICAgICAgY3VycmVudEluZGV4OiAwXG4gICAgfSxcbiAgICBjcmVhdGVkKCkge1xuICAgICAgICBjb25zdCB7IGRlZmF1bHRJbmRleCwgaW5pdGlhbE9wdGlvbnMgfSA9IHRoaXMuZGF0YTtcbiAgICAgICAgdGhpcy5zZXQoe1xuICAgICAgICAgICAgY3VycmVudEluZGV4OiBkZWZhdWx0SW5kZXgsXG4gICAgICAgICAgICBvcHRpb25zOiBpbml0aWFsT3B0aW9uc1xuICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0SW5kZXgoZGVmYXVsdEluZGV4KTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgICBjb3VudCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGEub3B0aW9ucy5sZW5ndGg7XG4gICAgICAgIH0sXG4gICAgICAgIGJhc2VPZmZzZXQoKSB7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gKGRhdGEuaXRlbUhlaWdodCAqIChkYXRhLnZpc2libGVJdGVtQ291bnQgLSAxKSkgLyAyO1xuICAgICAgICB9LFxuICAgICAgICB3cmFwcGVyU3R5bGUoKSB7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIGB0cmFuc2l0aW9uOiAke2RhdGEuZHVyYXRpb259bXNgLFxuICAgICAgICAgICAgICAgIGB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsICR7ZGF0YS5vZmZzZXQgKyBkYXRhLmJhc2VPZmZzZXR9cHgsIDApYCxcbiAgICAgICAgICAgICAgICBgbGluZS1oZWlnaHQ6ICR7ZGF0YS5pdGVtSGVpZ2h0fXB4YFxuICAgICAgICAgICAgXS5qb2luKCc7ICcpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB3YXRjaDoge1xuICAgICAgICBkZWZhdWx0SW5kZXgodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0SW5kZXgodmFsdWUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIG9uVG91Y2hTdGFydChldmVudCkge1xuICAgICAgICAgICAgdGhpcy5zZXQoe1xuICAgICAgICAgICAgICAgIHN0YXJ0WTogZXZlbnQudG91Y2hlc1swXS5jbGllbnRZLFxuICAgICAgICAgICAgICAgIHN0YXJ0T2Zmc2V0OiB0aGlzLmRhdGEub2Zmc2V0LFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgb25Ub3VjaE1vdmUoZXZlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IGRlbHRhWSA9IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WSAtIGRhdGEuc3RhcnRZO1xuICAgICAgICAgICAgdGhpcy5zZXQoe1xuICAgICAgICAgICAgICAgIG9mZnNldDogcmFuZ2UoZGF0YS5zdGFydE9mZnNldCArIGRlbHRhWSwgLShkYXRhLmNvdW50ICogZGF0YS5pdGVtSGVpZ2h0KSwgZGF0YS5pdGVtSGVpZ2h0KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uVG91Y2hFbmQoKSB7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IHRoaXM7XG4gICAgICAgICAgICBpZiAoZGF0YS5vZmZzZXQgIT09IGRhdGEuc3RhcnRPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldCh7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBERUZBVUxUX0RVUkFUSU9OXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSByYW5nZShNYXRoLnJvdW5kKC1kYXRhLm9mZnNldCAvIGRhdGEuaXRlbUhlaWdodCksIDAsIGRhdGEuY291bnQgLSAxKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEluZGV4KGluZGV4LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25DbGlja0l0ZW0oZXZlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgaW5kZXggfSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldDtcbiAgICAgICAgICAgIHRoaXMuc2V0SW5kZXgoaW5kZXgsIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBhZGp1c3RJbmRleChpbmRleCkge1xuICAgICAgICAgICAgY29uc3QgeyBkYXRhIH0gPSB0aGlzO1xuICAgICAgICAgICAgaW5kZXggPSByYW5nZShpbmRleCwgMCwgZGF0YS5jb3VudCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gaW5kZXg7IGkgPCBkYXRhLmNvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNEaXNhYmxlZChkYXRhLm9wdGlvbnNbaV0pKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBpbmRleCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzRGlzYWJsZWQoZGF0YS5vcHRpb25zW2ldKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGlzRGlzYWJsZWQob3B0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNPYmoob3B0aW9uKSAmJiBvcHRpb24uZGlzYWJsZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGdldE9wdGlvblRleHQob3B0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gaXNPYmoob3B0aW9uKSAmJiBkYXRhLnZhbHVlS2V5IGluIG9wdGlvblxuICAgICAgICAgICAgICAgID8gb3B0aW9uW2RhdGEudmFsdWVLZXldXG4gICAgICAgICAgICAgICAgOiBvcHRpb247XG4gICAgICAgIH0sXG4gICAgICAgIHNldEluZGV4KGluZGV4LCB1c2VyQWN0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IHRoaXM7XG4gICAgICAgICAgICBpbmRleCA9IHRoaXMuYWRqdXN0SW5kZXgoaW5kZXgpIHx8IDA7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSAtaW5kZXggKiBkYXRhLml0ZW1IZWlnaHQ7XG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IGRhdGEuY3VycmVudEluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0KHsgb2Zmc2V0LCBjdXJyZW50SW5kZXg6IGluZGV4IH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB1c2VyQWN0aW9uICYmIHRoaXMuJGVtaXQoJ2NoYW5nZScsIGluZGV4KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldCh7IG9mZnNldCB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0VmFsdWUodmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gdGhpcy5kYXRhO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0T3B0aW9uVGV4dChvcHRpb25zW2ldKSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0SW5kZXgoaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRWYWx1ZSgpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBkYXRhLm9wdGlvbnNbZGF0YS5jdXJyZW50SW5kZXhdO1xuICAgICAgICB9XG4gICAgfVxufSk7XG4iXX0=